from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from time import time

import app.architecture.keyboards as kb
from app.architecture.structure import get_game, delete_game


async def leave(message: Message, state: FSMContext):
    data = await state.get_data()
    if data:
        token = data['token']
        current_user = data['current_user']
        game = await get_game(token)
        if game:
            await game.delete_player(current_user)
            await message.answer('–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É.')
            await echo_all(message, state, f'–ò–≥—Ä–æ–∫ {current_user.name} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.', False, False)
            if not (await game.are_players_here()):
                await delete_game(token)
                print(f'{token} –∏–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞. –í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã—à–ª–∏.')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ–º –æ—á–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞
async def print_scores(message: Message, state: FSMContext, game):
    scores = game.scores
    msg = ''
    last_round_scores = sorted(game.last_round_scores.items(), key=lambda item: item[1], reverse=True)
    if game.photos:
        arrows = 'üü¢üîª‚ö™Ô∏è'
        for place, (player, score) in enumerate(sorted(scores.items(), key=lambda item: item[1], reverse=True)):
            for place_2, (player_2, _) in enumerate(last_round_scores):
                if player_2 == player and place < place_2:
                    msg += f'{arrows[0]} {place + 1}. {player.name}: {score}\n'
                    break
                elif player_2 == player and place > place_2:
                    msg += f'{arrows[1]} {place + 1}. {player.name}: {score}\n'
                elif player_2 == player and place == place_2:
                    msg += f'{arrows[2]} {place + 1}. {player.name}: {score}\n'
    else:
        places_smiles = 'ü•áü•àü•âüéñ'
        for place, (player, score) in enumerate(sorted(scores.items(), key=lambda item: item[1], reverse=True)):
            if place >= 3:
                msg += f'{places_smiles[-1]} {place + 1}. {player.name}: {score}\n'
            else:
                msg += f'{places_smiles[place]} {place + 1}. {player.name}: {score}\n'

    if game.photos:
        await echo_all(message, state, msg, True, False)
    else:
        await echo_all(message, state, msg, True, True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º, –∫—Ç–æ –≤ –∏–≥—Ä–µ
async def echo_all(message: Message, state: FSMContext, msg: str, with_user_who_triggered: bool, delete_kb: bool = False):
    data = await state.get_data()
    game = await get_game(data['token'])
    for player in game.players:
        if player.tg_id == message.from_user.id and with_user_who_triggered:
            if delete_kb:
                await message.bot.send_message(player.tg_id, msg, reply_markup=kb.del_kb)
            else:
                await message.bot.send_message(player.tg_id, msg)
        else:
            if delete_kb:
                await message.bot.send_message(player.tg_id, msg, reply_markup=kb.del_kb)
            else:
                await message.bot.send_message(player.tg_id, msg)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞—É–Ω–¥
async def round_ready(message: Message, state: FSMContext):
    data = await state.get_data()
    game = await get_game(data['token'])
    for value in game.round_ready.values():
        if not value:
            return False

    return True

# –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
async def game_running(message: Message, state: FSMContext):
    data = await state.get_data()
    game = await get_game(data['token'])
    player = data['current_user']
    await game.player_ready(player)
    keyboard = await kb.create_keyboard_for_game(game.players)
    ready = await round_ready(message, state)

    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å –∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã, –Ω–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
    if game.photos and ready:
        if game.game_started: # –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç - –≤—ã–≤–æ–¥–∏–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
            await print_scores(message, state, game)
        else:
            game.game_started = True # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ - –ø–æ—Å–ª–µ –Ω–µ–≥–æ –Ω–∞–¥–æ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤

        await game.reset_round_ready()
        photo_id, _ = await game.get_random_photo()

        for player in game.players:
                await message.bot.send_photo(player.tg_id, photo_id)
                await message.bot.send_message(player.tg_id, '–ß—å–µ —ç—Ç–æ —Ñ–æ—Ç–æ?', reply_markup=keyboard)
        game.time_from_last_round = time() # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞
        await game.cache_scores() # –°–µ–π–≤–∏–º —Å–∫–æ—Ä —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è, –∫—Ç–æ –ø–æ–¥–Ω—è–ª—Å—è, –∞ –∫—Ç–æ –æ–ø—É—Å—Ç–∏–ª—Å—è
    elif game.photos and not ready: # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å, –Ω–æ –Ω–µ –≤—Å–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ - –¥–∞–µ–º –∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f'–î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞—é—Ç —Å–≤–æ–π –≤—ã–±–æ—Ä...')
    elif not game.photos and not ready: # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –Ω–æ –Ω–µ –≤—Å–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ - –¥–∞–µ–º –∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f'–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...')
    elif ready: # –ö–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–µ—Ç —Å–≤–æ–π –≤—ã–±–æ—Ä –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ–æ—Ç–∫–µ - –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        await echo_all(message, state, '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:', True)
        await print_scores(message, state, game)
        await echo_all(message, state, '–í—ã–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é. /menu', True)
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É (—É–¥–∞–ª—è–µ–º –µ–µ –∏–∑ –ø–∞–º—è—Ç–∏) –∏ –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –≤—ã–≤–µ—Å—Ç–∏ –æ—á–∫–∏
        await delete_game(data['token'])

    # if not game.photos:
    #     await state.set_state(GameState.game_ended)